CREATE TABLE IF NOT EXISTS public.transaction
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    clienid bigint NOT NULL,
    currency bigint NOT NULL,
    amount double precision NOT NULL,
    departmentaddress text COLLATE pg_catalog."default" NOT NULL,
    state text COLLATE pg_catalog."default",
    CONSTRAINT "Transaction_pkey" PRIMARY KEY (id)
)



CREATE OR REPLACE PROCEDURE public.create_transaction(
	IN clientid integer,
	IN departmentaddres text,
	IN amount double precision,
	IN currency integer,
	IN state text)
LANGUAGE 'plpgsql'
AS $BODY$
	BEGIN
		INSERT INTO Transaction(clienid, currency, amount, departmentaddress, state)
		VALUES(clientid, currency, amount, departmentaddres, state);
	END;
                
$BODY$;



CREATE OR REPLACE FUNCTION public.get_by_clientid(
	_clientid integer,
	_deparmantaddres text)
    RETURNS TABLE(ret text) 
    LANGUAGE 'plpgsql'
AS $BODY$
	BEGIN
		RETURN QUERY SELECT state FROM Transaction WHERE departmentaddress = _deparmantaddres and clienid = _clientid;
	END; 
                
$BODY$;



CREATE OR REPLACE FUNCTION public.get_by_id(
	_id integer)
    RETURNS text
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
	DECLARE item_state text;
	begin
		SELECT state INTO item_state FROM Transaction WHERE id = _id;
		RETURN item_state;
	end;
                
$BODY$;


